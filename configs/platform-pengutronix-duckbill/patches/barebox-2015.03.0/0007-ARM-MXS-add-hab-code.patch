From 0f8fb70e1a0df9b10b84579cb903d780c71723ce Mon Sep 17 00:00:00 2001
From: Marc Kleine-Budde <mkl@pengutronix.de>
Date: Mon, 24 Nov 2014 14:05:02 +0100
Subject: [PATCH 07/14] ARM/MXS: add hab code

This code is ported from an u-boot patch [1] by Shaojun Wang [2] which is found
in the "Mx28 Secure Boot" thread on the freescale community forum [3].

[1] https://community.freescale.com/servlet/JiveServlet/download/370047-269174/0001-enable-mx28-u-boot-hab.patch.txt.zip
[2] https://community.freescale.com/people/ShaojunWang
[3] https://community.freescale.com/thread/317254
---
 arch/arm/mach-mxs/Kconfig            |   5 +
 arch/arm/mach-mxs/Makefile           |   1 +
 arch/arm/mach-mxs/hab.c              | 227 +++++++++++++++++++++++++++++++++++
 arch/arm/mach-mxs/include/mach/hab.h | 218 +++++++++++++++++++++++++++++++++
 4 files changed, 451 insertions(+)
 create mode 100644 arch/arm/mach-mxs/hab.c
 create mode 100644 arch/arm/mach-mxs/include/mach/hab.h

diff --git a/arch/arm/mach-mxs/Kconfig b/arch/arm/mach-mxs/Kconfig
index ea0fa5a..f2c621f 100644
--- a/arch/arm/mach-mxs/Kconfig
+++ b/arch/arm/mach-mxs/Kconfig
@@ -126,6 +126,11 @@ config MXS_CMD_BCB
 	  in flash. This option enabled the 'bcb' command which can be used to
 	  generate this block during runtime.
 
+config MXS_HAB
+	tristate "HAB support"
+	help
+	  High Assurance Boot, as found on i.MX28
+
 endmenu
 
 menu "Board specific settings"
diff --git a/arch/arm/mach-mxs/Makefile b/arch/arm/mach-mxs/Makefile
index e384336..8064be5 100644
--- a/arch/arm/mach-mxs/Makefile
+++ b/arch/arm/mach-mxs/Makefile
@@ -5,3 +5,4 @@ obj-$(CONFIG_ARCH_IMX28) += clocksource-imx28.o usb-imx28.o soc-imx28.o
 obj-$(CONFIG_MXS_OCOTP) += ocotp.o
 obj-$(CONFIG_MXS_CMD_BCB) += bcb.o
 pbl-y += power-init.o mem-init.o lradc-init.o
+obj-$(CONFIG_MXS_HAB) += hab.o
diff --git a/arch/arm/mach-mxs/hab.c b/arch/arm/mach-mxs/hab.c
new file mode 100644
index 0000000..0375497
--- /dev/null
+++ b/arch/arm/mach-mxs/hab.c
@@ -0,0 +1,227 @@
+/*
+ * Copyright (C) 2014 Marc Kleine-Budde <mkl@pengutronix.de>
+ * Copyright (C) 2010 Freescale Semiconductor, Inc.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <common.h>
+#include <types.h>
+
+#include <mach/hab.h>
+
+/* Status definitions */
+enum hab_status {
+	HAB_STS_ANY = 0x00,
+	HAB_FAILURE = 0x33,
+	HAB_WARNING = 0x69,
+	HAB_SUCCESS = 0xf0
+};
+
+/* Security Configuration definitions */
+enum hab_config {
+	HAB_CFG_FAB = 0x00,		/* @rom Un-programmed IC */
+	HAB_CFG_OPEN = 0xf0,		/* Non-secure IC */
+	HAB_CFG_CLOSED = 0xcc,		/* Secure IC */
+};
+
+/* State definitions */
+enum hab_state {
+	HAB_STATE_INITIAL = 0x33,	/* Initialising state (transitory) */
+	HAB_STATE_CHECK = 0x55,		/* Check state (non-secure) */
+	HAB_STATE_NONSECURE = 0x66,	/* Non-secure state */
+	HAB_STATE_TRUSTED = 0x99,	/* Trusted state */
+	HAB_STATE_SECURE = 0xaa,	/* Secure state */
+	HAB_STATE_FAIL_SOFT = 0xcc,	/* Soft fail state */
+	HAB_STATE_FAIL_HARD = 0xff,	/* Hard fail state (terminal) */
+	HAB_STATE_NONE = 0xf0,		/* No security state machine */
+	HAB_STATE_MAX
+};
+
+typedef enum hab_status hab_rvt_entry_t(void);
+typedef enum hab_status hab_rvt_exit_t(void);
+typedef enum hab_status hab_loader_callback_f_t(void **, size_t *, const void *);
+typedef void *hab_rvt_authenticate_image_t(uint8_t, ptrdiff_t, void **, size_t *, hab_loader_callback_f_t);
+typedef enum hab_status hab_rvt_report_event_t(enum hab_status, uint32_t, uint8_t *, size_t *);
+typedef enum hab_status hab_rvt_report_status_t(enum hab_config *, enum hab_state *);
+
+#define HAB_RVT_ENTRY (*(uint32_t *)(0xFFFF8AF8 + 0x04 * 1))
+#define HAB_RVT_EXIT (*(uint32_t *)(0xFFFF8AF8 + 0x04 * 2))
+#define HAB_RVT_AUTHENTICATE_IMAGE  (*(uint32_t *)(0xFFFF8AF8 + 0x04 * 4))
+#define HAB_RVT_REPORT_EVENT (*(uint32_t *)(0xFFFF8AF8 + 0x04 * 8))
+#define HAB_RVT_REPORT_STATUS (*(uint32_t *)(0xFFFF8AF8 + 0x04 * 9))
+
+#define hab_rvt_entry ((hab_rvt_entry_t *)HAB_RVT_ENTRY)
+#define hab_rvt_exit ((hab_rvt_exit_t *)HAB_RVT_EXIT)
+#define hab_rvt_authenticate_image \
+	((hab_rvt_authenticate_image_t *)HAB_RVT_AUTHENTICATE_IMAGE)
+#define hab_rvt_report_event ((hab_rvt_report_event_t*)HAB_RVT_REPORT_EVENT)
+#define hab_rvt_report_status ((hab_rvt_report_status_t*)HAB_RVT_REPORT_STATUS)
+
+#define HAB_CID_ROM 0			/* ROM Caller ID */
+#define HAB_CID_UBOOT 1			/* UBOOT Caller ID*/
+
+#define OCOTP_CFG5_OFFSET 0x460
+#define ALIGN_SIZE 0x10
+#define CSF_ALIGN_SIZE 0x1000
+
+/*
+ * +------------+  0x0 (DDR_UIMAGE_START) -
+ * |   Header   |                          |
+ * +------------+  0x40                    |
+ * |            |                          |
+ * |            |                          |
+ * |            |                          |
+ * |            |                          |
+ * | Image Data |                          |
+ * .            |                          |
+ * .            |                           > Stuff to be authenticated ----+
+ * .            |                          |                                |
+ * |            |                          |                                |
+ * |            |                          |                                |
+ * +------------+                          |                                |
+ * |            |                          |                                |
+ * | Fill Data  |                          |                                |
+ * |            |                          |                                |
+ * +------------+ Align to ALIGN_SIZE      |                                |
+ * |    IVT     |                          |                                |
+ * +------------+ + IVT_SIZE              -                                 |
+ * |            |                                                           |
+ * |  CSF DATA  | <---------------------------------------------------------+
+ * |            |
+ * +------------+
+ * |            |
+ * | Fill Data  |
+ * |            |
+ * +------------+ + CSF_PAD_SIZE
+ */
+
+static void display_event(uint8_t *event_data, size_t bytes)
+{
+	unsigned int i;
+
+	if (event_data && (bytes > 0)) {
+		for (i = 0; i < bytes; i++) {
+			if (i == 0)
+				printf(" 0x%02x", event_data[i]);
+			else if ((i % 8) == 0)
+				printf("\n 0x%02x", event_data[i]);
+			else
+				printf(" 0x%02x", event_data[i]);
+		}
+	}
+	printf("\n\n");
+}
+
+void get_hab_status(void)
+{
+	unsigned int index = 0;
+	uint8_t event_data[256];
+	size_t bytes = sizeof(event_data);
+	enum hab_config config;
+	enum hab_state state;
+
+	if (hab_rvt_report_status(&config, &state) != HAB_SUCCESS) {
+		printf("HAB Configuration: 0x%02x HAB State: 0x%02x\n\n", config, state);
+
+		while (hab_rvt_report_event(HAB_FAILURE, index, event_data, &bytes) == HAB_SUCCESS) {
+			printf("---------HAB Event %d -----------------\n"
+			       "event data:\n", index + 1);
+
+			display_event(event_data, bytes);
+			bytes = sizeof(event_data);
+			index++;
+		}
+
+		/* Check reason for stopping */
+		if (hab_rvt_report_event(HAB_STS_ANY, index, NULL, &bytes) == HAB_SUCCESS)
+			printf("ERROR: Recompile with larger event data buffer Â¨C at least %d bytes\n", bytes);
+	} else {
+		printf("HAB Configuration: 0x%02x HAB State: 0x%02x\n"
+		       "No HAB Failure Events Found!\n\n", config, state);
+	}
+}
+
+#ifdef DEBUG_AUTHENTICATE_IMAGE
+static void dump_mem(uint32_t addr, int size)
+{
+	int i;
+
+	for (i = 0; i < size; i += 4) {
+		if (i != 0) {
+			if (i % 16 == 0)
+				printf("\n");
+			else
+				printf(" ");
+		}
+
+		printf("0x%08x", *(uint32_t *) addr);
+		addr += 4;
+	}
+
+	printf("\n");
+
+	return;
+}
+#endif
+
+int authenticate_image(uint32_t ddr_start, uint32_t image_size)
+{
+	ptrdiff_t ivt_offset, csf_offset, bytes;
+	int ret = 0;
+	ulong start;
+
+	if (hab_rvt_entry() == HAB_SUCCESS) {
+
+		/* If not already aligned, Align to ALIGN_SIZE */
+		if (image_size % ALIGN_SIZE)
+			ivt_offset = image_size - image_size % ALIGN_SIZE + ALIGN_SIZE;
+		else
+			ivt_offset = image_size;
+
+		start = ddr_start;
+		csf_offset = ivt_offset + sizeof(struct hab_ivt) + 0x4;
+
+		if (csf_offset % CSF_ALIGN_SIZE)
+			csf_offset = csf_offset - csf_offset % CSF_ALIGN_SIZE + CSF_ALIGN_SIZE;
+
+		bytes = *(uint32_t *) (ddr_start + ivt_offset + sizeof(struct hab_ivt));
+
+#ifdef DEBUG_AUTHENTICATE_IMAGE
+		printf("ivt_offset = 0x%x, ivt addr = 0x%x, csf_offset = 0x%x\n",
+		       ivt_offset, ddr_start + ivt_offset, csf_offset);
+		printf("Dumping IVT\n");
+		dump_mem(ddr_start + ivt_offset, sizeof(struct hab_ivt) + 0x4);
+
+		printf("Dumping CSF Header\n");
+		dump_mem(ddr_start + csf_offset, 0x40);
+
+		printf("\nCalling authenticate_image in ROM\n");
+		printf("\tivt_offset = 0x%x\n\tstart = 0x%08x"
+		       "\n\tcsf_offset = 0x%x\n", ivt_offset, start, csf_offset);
+#endif
+		hab_rvt_authenticate_image(HAB_CID_UBOOT, ivt_offset, (void **)&start, (size_t *) & bytes, NULL);
+		if (hab_rvt_exit() != HAB_SUCCESS) {
+			printf("hab exit function fail\n");
+			ret = -1;
+		}
+	} else {
+		printf("hab entry function fail\n");
+		ret = -1;
+	}
+
+	get_hab_status();
+
+	return ret;
+}
diff --git a/arch/arm/mach-mxs/include/mach/hab.h b/arch/arm/mach-mxs/include/mach/hab.h
new file mode 100644
index 0000000..3b9f3b3
--- /dev/null
+++ b/arch/arm/mach-mxs/include/mach/hab.h
@@ -0,0 +1,218 @@
+/*
+ * Copyright (c) Freescale Semiconductor, Inc. All rights reserved.
+ *
+ * Freescale Semiconductor, Inc.
+ * Proprietary & Confidential
+ *
+ * This source code and the algorithms implemented therein constitute
+ * confidential information and may comprise trade secrets of Freescale Semiconductor, Inc.
+ * or its associates, and any use thereof is subject to the terms and
+ * conditions of the Confidential Disclosure Agreement pursual to which this
+ * source code was originally received.
+ */
+
+#ifndef __HAB_H
+#define __HAB_H
+
+/*
+ * Header field components
+ * @ingroup hdr
+ */
+struct hab_hdr {
+	uint8_t tag;	      /* Tag field */
+	uint8_t len[2];	      /* Length field in bytes (big-endian) */
+	uint8_t par;	      /* Parameters field */
+};
+
+/*
+ * Image entry function prototype
+ * @ingroup rvt
+ *
+ * This typedef serves as the return type for hab_rvt.authenticate_image().  It
+ * specifies a void-void function pointer, but can be cast to another function
+ * pointer type if required.
+ *
+ */
+typedef void (*hab_image_entry_f) (void);
+
+/*
+ * @ref ivt structure
+ * @ingroup ivt
+ *
+ * @par Format
+ *
+ * An @ref ivt consists of a @ref hdr followed by a list of addresses as
+ * described further below.
+ *
+ * @warning The @a entry address may not be NULL.
+ *
+ * @warning On an IC not configured as #HAB_CFG_CLOSED, the
+ * @a csf address may be NULL.  If it is not NULL, the @ref csf will be
+ * processed, but any failures should be non-fatal.
+ *
+ * @warning On an IC configured as #HAB_CFG_CLOSED, the @a
+ * csf address may not be NULL, and @ref csf failures are typically fatal.
+ *
+ * @remark The Boot Data located using the @a boot_data field is interpreted
+ * by the HAB caller in a boot-mode specific manner.  This may be used by the
+ * boot ROM as to determine the load address and boot device configuration for
+ * images loaded from block devices (see @ref ref_rug for details).
+ *
+ * @remark All addresses given in the IVT, including the Boot Data (if
+ * present) are those for the final load location.
+ *
+ * @anchor ila
+ *
+ * @par Initial load addresses
+ *
+ * The @a self field is used to calculate addresses in boot modes where an
+ * initial portion of the image is loaded to an initial location.  In such
+ * cases, the IVT, Boot Data (if present) and DCD (if present) are used in
+ * configuring the IC and loading the full image to its final location.  Only
+ * the IVT, Boot Data (if present) and DCD (if present) are required to be
+ * within the initial image portion.
+ *
+ * The method for calculating an initial load address for the DCD is
+ * illustrated in the following C fragment.  Similar calculations apply to
+ * other fields.
+ *
+@verbatim
+        hab_ivt_t* ivt_initial = <initial IVT load address>;
+        const void* dcd_initial = ivt_initial->dcd;
+        if (ivt_initial->dcd != NULL)
+            dcd_initial = (const uint8_t*)ivt_initial
+                          + (ivt_initial->dcd - ivt_initial->self)
+@endverbatim
+
+ * \note The void* types in this structure have been changed to uint32_t so
+ *      that this code will work correctly when compiled on a 64-bit host.
+ *      Otherwise the structure would come out incorrect.
+ */
+struct hab_ivt {
+	/*
+	 * @ref hdr with tag #HAB_TAG_IVT, length and HAB version
+	 * fields (see @ref data)
+	 */
+	struct hab_hdr hdr;
+
+	/*
+	 * Absolute address of the first instruction to execute from
+	 * the image
+	 */
+	uint32_t entry;		/* hab_image_entry_f */
+
+	/** Reserved in this version of HAB: should be NULL. */
+	uint32_t reserved1;	/* const void */
+
+	/** Absolute address of the image DCD: may be NULL. */
+	uint32_t dcd;		/* const void */
+
+	/*
+	 * Absolute address of the Boot Data: may be NULL, but not
+	 * interpreted any further by HAB
+	 */
+	uint32_t boot_data;	/* const void */
+
+	/** Absolute address of the IVT.*/
+	uint32_t self;		/* const void */
+
+	/** Absolute address of the image CSF.*/
+	uint32_t csf;		/* const void */
+
+	/** Reserved in this version of HAB: should be zero. */
+	uint32_t reserved2;
+};
+
+struct _hab_aut {
+	struct hab_ivt ivt;
+	uint32_t img_len;
+};
+
+/*
+ * Helper macros
+ */
+#define HAB_CMD_UNS 0xff
+
+#define DEFAULT_IMG_KEY_IDX 2
+
+#define GEN_MASK(width) ((1UL << (width)) - 1)
+
+#define GEN_FIELD(f, width, shift) \
+	(((f) & GEN_MASK(width)) << (shift))
+
+#define PACK_UINT32(a, b, c, d) \
+	((((a) & 0xff) << 24) | \
+	 (((b) & 0xff) << 16) | \
+	 (((c) & 0xff) << 8) |	\
+	 (((d) & 0xff)))
+
+#define EXPAND_UINT32(w) \
+	(uint8_t)((w)>>24), (uint8_t)((w)>>16), (uint8_t)((w)>>8), (uint8_t)(w)
+
+#define HDR(tag, bytes, par) \
+	(uint8_t)(tag), (uint8_t)((bytes)>>8), (uint8_t)(bytes), (uint8_t)(par)
+
+#define HAB_VER(maj, min) \
+	(GEN_FIELD((maj), HAB_VER_MAJ_WIDTH, HAB_VER_MAJ_SHIFT) | \
+	 GEN_FIELD((min), HAB_VER_MIN_WIDTH, HAB_VER_MIN_SHIFT))
+
+/*
+ * CSF header
+ */
+#define CSF_HDR(bytes, HABVER) \
+	HDR(HAB_TAG_CSF, (bytes), HABVER)
+
+/*
+ * DCD  header
+ */
+#define DCD_HDR(bytes, HABVER) \
+	HDR(HAB_TAG_DCD, (bytes), HABVER)
+
+/*
+ * IVT  header (goes in the struct's hab_hdr_t field, not a byte array)
+ */
+#define IVT_HDR(bytes, HABVER) \
+	{HAB_TAG_IVT, {(uint8_t)((bytes)>>8), (uint8_t)(bytes)}, HABVER}
+
+/*
+ * @name External data structure tags
+ * @anchor dat_tag
+ *
+ * Tag values 0x00 .. 0xef are reserved for HAB.  Values 0xf0 .. 0xff
+ * are available for custom use.
+ */
+#define HAB_TAG_IVT 0xd1	/* Image Vector Table */
+#define HAB_TAG_DCD 0xd2	/* Device Configuration Data */
+#define HAB_TAG_CSF 0xd4	/* Command Sequence File */
+#define HAB_TAG_CRT 0xd7	/* Certificate */
+#define HAB_TAG_SIG 0xd8	/* Signature */
+#define HAB_TAG_EVT 0xdb	/* Event */
+#define HAB_TAG_RVT 0xdd	/* ROM Vector Table */
+
+/*
+ * Values b0 ... cf reserved for CSF commands.  Values e0 ... ef reserved for
+ * key types.
+ *
+ * Available values: 03, 05, 06, 09, 0a, 0c, 0f, 11, 12, 14, 17, 18, 1b, 1d,
+ * 1e, 21, 22, 24, 27, 28, 2b, 2d, 2e, 30, 33, 35, 36, 39, 3a, 3c, 3f, 41, 42,
+ * 44, 47, 48, 4b, 4d, 4e, 50, 53, 55, 56, 59, 5a, 5c, 5f, 60, 63, 65, 66, 69,
+ * 6a, 6c, 6f, 71, 72, 74, 77, 78, 7b, 7d, 7e, 81, 82, 84, 87, 88, 8b, 8d, 8e,
+ * 90, 93, 95, 96, 99, 9a, 9c, 9f, a0, a3, a5, a6, a9, aa, ac, af, b1, b2, b4,
+ * b7, b8, bb, bd, be
+ *
+ * Custom values: f0, f3, f5, f6, f9, fa, fc, ff
+ */
+
+/* @name HAB version */
+#define HAB_MAJOR_VERSION 4	/* Major version of this HAB release */
+#define HAB_MINOR_VERSION 0	/* Minor version of this HAB release */
+#define HAB_VER_MAJ_WIDTH 4	/* Major version field width  */
+#define HAB_VER_MAJ_SHIFT 4	/* Major version field offset  */
+#define HAB_VER_MIN_WIDTH 4	/* Minor version field width  */
+#define HAB_VER_MIN_SHIFT 0	/* Minor version field offset  */
+/* Full version of this HAB release @hideinitializer */
+#define HAB_VERSION HAB_VER(HAB_MAJOR_VERSION, HAB_MINOR_VERSION)
+/* Base version for this HAB release @hideinitializer */
+#define HAB_BASE_VERSION HAB_VER(HAB_MAJOR_VERSION, 0)
+
+#endif /* __HAB_H */
-- 
2.1.4

